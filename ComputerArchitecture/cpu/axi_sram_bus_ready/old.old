
reg  [2:0]sram_ex_state_now;
wire [2:0]sram_ex_state_next;//wire in fact

`define sram_ex_reset 3'b000
`define sram_ex_idle 3'b001
`define sram_ex_store 3'b010
`define sram_ex_load 3'b100
`define sram_ex_wait 3'b111

always@(posedge clk)
begin
    if(!resetn)begin
        sram_ex_state_now<=3'b0;
    end else begin
        sram_ex_state_now<=sram_ex_state_next;
    end
end

assign sram_ex_state_next=
    {3{sram_ex_state_now==`sram_ex_reset}}&
    (
        sram_ex_idle
    )|
    {3{sram_ex_state_now==`sram_ex_idle}}&
    (
        {3{ID_EX_reg.mem_wen_pick!=0}}&`sram_ex_store|
        {3{ID_EX_reg.mem_read}}&`sram_ex_load
    )|
    {3{sram_ex_state_now==`sram_ex_store}}&
    (
        clear_pipeline?`sram_ex_idle
        data_addr_ok?
            `sram_ex_idle:
            `sram_ex_store
    )|
    {3{sram_ex_state_now==`sram_ex_load}}&
    (
        data_addr_ok?`sram_ex_idle:`sram_ex_load
    )|
    {3{sram_ex_state_now==`sram_ex_wait}}&
    (
        data_addr_ok?`sram_ex_idle:`sram_ex_wait
    );

//TODO: MEM allowin!
wire ex_sram_finished=
    (ID_EX_reg.mem_wen_pick==0)&(!ID_EX_reg.mem_read)|
    data_addr_ok;
assign data_req=
    (sram_ex_state_now==`sram_ex_store)|
    (sram_ex_state_now==`sram_ex_load);
assign data_wr=
    (sram_ex_state_now==`sram_ex_store);
assign data_addr=data_sram_addr;     
assign data_wdata=data_sram_wdata;
assign strb=data_sram_wen;